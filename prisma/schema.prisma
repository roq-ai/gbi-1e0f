generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model attendance {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date         DateTime     @db.Timestamp(6)
  status       String       @db.VarChar(20)
  student_id   String       @db.Uuid
  class_id     String       @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  Renamedclass Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student      student      @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model has been renamed to 'Renamedclass' during introspection, because the original name 'class' is reserved.
model Renamedclass {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(100)
  start_time      DateTime     @db.Timestamp(6)
  end_time        DateTime     @db.Timestamp(6)
  teacher_id      String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  attendance      attendance[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teacher         teacher      @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student         student[]

  @@map("class")
}

model organization {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?        @db.VarChar(255)
  name         String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  user_id      String         @db.Uuid
  tenant_id    String         @db.VarChar(255)
  Renamedclass Renamedclass[]
  user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher      teacher[]
}

model student {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name      String       @db.VarChar(100)
  last_name       String       @db.VarChar(100)
  enrollment_date DateTime     @db.Timestamp(6)
  class_id        String       @db.Uuid
  user_id         String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  attendance      attendance[]
  Renamedclass    Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model teacher {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject         String         @db.VarChar(100)
  user_id         String         @db.Uuid
  organization_id String         @db.Uuid
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  Renamedclass    Renamedclass[]
  organization    organization   @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
  student      student[]
  teacher      teacher[]
}
